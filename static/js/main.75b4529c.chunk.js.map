{"version":3,"sources":["components/SnakeBodyBlock.jsx","components/Food.jsx","components/SnakeBody.jsx","components/Game.jsx","index.js"],"names":["SnakeBodyBlock","props","style","height","size","width","left","location","x","top","y","head","react_default","a","createElement","className","Food","foodLocation","SnakeBody","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","snakeBlockSize","parseInt","headLocation","snakeBody","state","getNewLocation","currentDir","direction","moveSnake","bind","assertThisInitialized","checkFood","moveSnakeForward","onSameLocationRun","die","eatItself","dropFood","_this2","mover","setInterval","randX","Math","random","randY","console","log","isFoodEaten","dir","_this3","setState","newHead","getNewHeadFromDir","newState","concat","toConsumableArray","pop","obj1","obj2","fn","x1","y1","x2","y2","clearInterval","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","bodyState","value","err","return","body","index","length","push","components_SnakeBodyBlock","key","components_Food","React","Component","Game","sizes","platform","snake","window","addEventListener","event","newDir","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","tabIndex","components_SnakeBody","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.75b4529c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SnakeBodyBlock(props) {\n  const style = {\n    height: props.size + '%',\n    width: props.size + '%',\n    left: props.location.x + '%',\n    top: props.location.y + '%'\n  }\n\n  if (props.head === true) {\n    return (\n      <div className=\"SnakeHead\" style={style}>\n      </div>\n    )\n  }\n  return (\n    <div className=\"SnakeBody\" style={style}>\n    </div>\n  )\n}\n\nexport default SnakeBodyBlock;","import React from 'react';\n\nfunction Food(props) {\n\n  const style = {\n    width: props.size + '%',\n    height:  props.size + '%',\n    left: props.foodLocation.x + '%',\n    top: props.foodLocation.y + '%'\n  };\n\n  return (\n    <div className='Food' style={style}>\n    </div>\n  )\n}\n\n\nexport default Food;","import React from 'react';\nimport SnakeBodyBlock from './SnakeBodyBlock';\nimport Food from './Food';\n\nclass SnakeBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.snakeBlockSize = parseInt(this.props.size, 10);\n\n    // initial snake near middle\n    let headLocation = 50 - 50 % this.snakeBlockSize ;\n\n    let snakeBody = [\n      {\n        x: headLocation - this.snakeBlockSize,\n        y: headLocation,\n      },\n      {\n        x: headLocation - 2 * this.snakeBlockSize,\n        y: headLocation,\n      },\n      {\n        x: headLocation - 3 * this.snakeBlockSize,\n        y: headLocation,\n      }\n    ];\n\n    this.state = {\n      snakeBody: snakeBody,\n      foodLocation: this.getNewLocation(this.snakeBlockSize),\n      currentDir: this.props.direction\n    };\n\n    this.moveSnake = this.moveSnake.bind(this);\n    this.checkFood = this.checkFood.bind(this);\n    this.moveSnakeForward = this.moveSnakeForward.bind(this);\n    this.onSameLocationRun = this.onSameLocationRun.bind(this);\n    this.die = this.die.bind(this);\n    this.eatItself = this.eatItself.bind(this);\n    this.dropFood = this.dropFood.bind(this);\n    this.getNewLocation = this.getNewLocation.bind(this);\n  }\n\n  componentDidMount() {\n    this.mover = setInterval(() => {\n      this.moveSnake(this.props.direction)\n    }, 100);\n  }\n\n  getNewLocation(size) {\n    let randX = parseInt(Math.random() * 100, 10);\n    randX -= randX % this.snakeBlockSize;\n    let randY = parseInt(Math.random() * 100, 10);\n    randY -= randY % this.snakeBlockSize;\n\n    let foodLocation = {\n      x: randX,\n      y: randY\n    }\n    console.log(randX, randY);\n\n    return foodLocation;\n  }\n\n  moveSnakeForward(isFoodEaten, dir) {\n\n    this.setState(state => {\n      let getNewHeadFromDir = () => {\n        let newHead = {\n          x: state.snakeBody[0].x,\n          y: state.snakeBody[0].y\n        };\n        if (dir === 'ArrowRight')\n          newHead.x += this.snakeBlockSize;\n        else if (dir === 'ArrowLeft')\n          newHead.x -= this.snakeBlockSize;\n        else if (dir === 'ArrowUp')\n          newHead.y -= this.snakeBlockSize;\n        else if (dir === 'ArrowDown')\n          newHead.y += this.snakeBlockSize;\n\n        return newHead;\n      }\n\n      let newHead = getNewHeadFromDir();\n\n      this.eatItself(newHead);\n\n      // dead\n      if (newHead.x + this.snakeBlockSize > 100 ||\n        newHead.y + this.snakeBlockSize > 100 ||\n        newHead.x < 0 ||\n        newHead.y < 0) {\n        this.die();\n        return\n      }\n\n\n      let newState = {\n        snakeBody: [newHead, ...state.snakeBody],\n        currentDir: this.props.direction\n      };\n      if (!isFoodEaten) {\n        newState.snakeBody.pop();\n      }\n      return newState;\n    })\n  }\n\n  moveSnake(dir) {\n    let isFoodEaten = this.checkFood();\n\n    this.moveSnakeForward(isFoodEaten, dir);\n  }\n\n  checkFood() {\n    // increase the snake length\n    // console.log(\"Check Food!\");\n    const headLocation = {\n      x: this.state.snakeBody[0].x,\n      y: this.state.snakeBody[0].y\n    };\n\n    return this.onSameLocationRun(headLocation, this.state.foodLocation, this.dropFood)\n  }\n\n  onSameLocationRun(obj1, obj2, fn) {\n    let { x: x1, y: y1 } = obj1;\n    let { x: x2, y: y2 } = obj2;\n\n    if (x1 === x2 && y1 === y2) {\n      // console.log(\"Lets eat!\");\n      fn();\n      return true;\n    }\n    return false;\n  }\n\n  die() {\n    console.log('Imma ded!');\n    // console.trace()\n    clearInterval(this.mover);\n  }\n\n  eatItself(newHead) {\n\n    // !oppDir[dir] === this.state.currentDir\n    for (let bodyState of this.state.snakeBody) {\n      this.onSameLocationRun(newHead, bodyState, this.die);\n    }\n\n  }\n\n  dropFood() {\n    // console.log(\"Drop new Food\");\n    let foodLocation = this.getNewLocation(this.snakeBlockSize);\n    this.setState({\n      foodLocation: foodLocation\n    });\n  }\n\n  render() {\n    let body = [];\n    for (let index = 0; index < this.state.snakeBody.length; index++) {\n      body.push(<SnakeBodyBlock\n        size={this.snakeBlockSize}\n        key={index}\n        head={index === 0}\n        location={this.state.snakeBody[index]}\n      />)\n    }\n\n    return (\n      <div>\n        <div>\n          {body}\n        </div>\n        < Food size={this.snakeBlockSize} foodLocation={this.state.foodLocation}\n        />\n      </div>\n    )\n  }\n\n}\n\nexport default SnakeBody","import React from 'react';\n// import SnakeHead from './SnakeHead';\nimport SnakeBody from './SnakeBody';\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.sizes = {\n      platform: {\n        width: '50%',\n        height: '50%'\n      },\n      snake: {\n        width: 5,\n        height: 5\n      }\n    };\n    // initial state\n    this.state = {\n      direction: 'ArrowRight',\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', event => {\n      this.setState(state => {\n\n        let oppDirGiven = (currentDir, newDir) => {\n          const oppDir = {\n            'ArrowRight': 'ArrowLeft',\n            'ArrowLeft': 'ArrowRight',\n            'ArrowUp': 'ArrowDown',\n            'ArrowDown': 'ArrowUp'\n          }\n          return currentDir === oppDir[newDir]\n        }\n\n        if (!oppDirGiven(state.direction, event.key )) {\n          return ({\n            direction: event.key,\n          });\n        }\n      })\n    })\n  }\n\n\n  render() {\n    return (\n      <div tabIndex=\"1\" style={this.sizes.platform} className='Platform'>\n        <SnakeBody size={2} direction={this.state.direction} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport Game from './components/Game'\n\nReactDOM.render(<Game />, document.getElementById('root') );\n"],"sourceRoot":""}