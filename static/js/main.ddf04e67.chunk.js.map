{"version":3,"sources":["components/SnakeBodyBlock.jsx","components/Food.jsx","components/BestScore.jsx","components/CurrentScore.jsx","components/SnakeBody.jsx","components/Game.jsx","index.js"],"names":["SnakeBodyBlock","props","style","height","size","width","left","location","x","top","y","head","react_default","a","createElement","className","Food","foodLocation","CurrentScore","value","storage","window","localStorage","bestScore","getItem","newBestScore","parseInt","currentScore","setItem","snakeLength","initSnakeLength","gameOver","BestScore","SnakeBody","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","snakeBlockSize","headLocation","snakeBody","length","state","currentDir","direction","getNewLocation","moveSnake","bind","assertThisInitialized","checkFood","moveSnakeForward","onSameLocationRun","die","eatItself","dropFood","_this2","mover","setInterval","randX","Math","random","randY","index","bodyBlock","console","log","isFoodEaten","newDir","_this3","setState","newHead","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","oppDirGiven","getNewHeadFromDir","newState","concat","toConsumableArray","pop","obj1","obj2","fn","x1","y1","x2","y2","clearInterval","trace","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","bodyState","err","return","body","push","components_SnakeBodyBlock","key","components_Food","components_CurrentScore","React","Component","Game","sizes","platform","computePlayingField","innerHeight","innerWidth","snake","screenHeight","screenWidth","fieldLeftEdge","fieldTopEdge","shorter","min","longer","max","addEventListener","event","tabIndex","components_SnakeBody","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.ddf04e67.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SnakeBodyBlock(props) {\n  const style = {\n    height: props.size + '%',\n    width: props.size + '%',\n    left: props.location.x + '%',\n    top: props.location.y + '%'\n  }\n\n  if (props.head === true) {\n    return (\n      <div className=\"SnakeHead\" style={style}>\n      </div>\n    )\n  }\n  return (\n    <div className=\"SnakeBody\" style={style}>\n    </div>\n  )\n}\n\nexport default SnakeBodyBlock;","import React from 'react';\n\nfunction Food(props) {\n\n  const style = {\n    width: props.size + '%',\n    height:  props.size + '%',\n    left: props.foodLocation.x + '%',\n    top: props.foodLocation.y + '%'\n  };\n\n  return (\n    <div className='Food' style={style}>\n    </div>\n  )\n}\n\n\nexport default Food;","import React from 'react';\n\nfunction CurrentScore(props) {\n\n  let storage = window.localStorage;\n  let bestScore = storage.getItem('bestScore');\n  let newBestScore = false;\n\n  if (!bestScore) {\n    storage.setItem('bestScore', props.currentScore);\n  } else if (parseInt(props.currentScore, 10) > parseInt(bestScore, 10)) {\n    newBest(props.currentScore);\n  }\n\n  function newBest(value) {\n    storage.setItem('bestScore', value);\n    newBestScore = true;\n  }\n\n  return (\n    <div className=\"best-score\">\n      {newBestScore? \"Congrats!, Your New\" : \"Beat the\"} Best Score\n          <br />\n      {storage.getItem('bestScore')}\n    </div>\n  );\n}\n\nexport default CurrentScore;","import React from 'react';\nimport BestScore from \"./BestScore\";\n\nfunction CurrentScore(props) {\n  let currentScore = props.snakeLength - props.initSnakeLength;\n  return (\n    <div>\n      <div className=\"current-score\">\n        Current Score\n          <br />\n        {currentScore}\n      </div>\n\n      {props.gameOver ? <BestScore currentScore={currentScore} /> : false }\n\n    </div>\n  );\n}\n\nexport default CurrentScore;","import React from 'react';\nimport SnakeBodyBlock from './SnakeBodyBlock';\nimport Food from './Food';\nimport CurrentScore from \"./CurrentScore\";\n\nclass SnakeBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.snakeBlockSize = parseInt(this.props.size, 10);\n\n    // initial snake near middle\n    let headLocation = 50 - 50 % this.snakeBlockSize;\n\n    let snakeBody = [\n      {\n        x: headLocation - this.snakeBlockSize,\n        y: headLocation,\n      },\n      {\n        x: headLocation - 2 * this.snakeBlockSize,\n        y: headLocation,\n      },\n      {\n        x: headLocation - 3 * this.snakeBlockSize,\n        y: headLocation,\n      }\n    ];\n\n    this.initSnakeLength = snakeBody.length;\n\n    this.state = {\n      snakeBody: snakeBody,\n      currentDir: this.props.direction,\n      gameOver: false\n    };\n\n    this.state.foodLocation = this.getNewLocation();\n\n    this.moveSnake = this.moveSnake.bind(this);\n    this.checkFood = this.checkFood.bind(this);\n    this.moveSnakeForward = this.moveSnakeForward.bind(this);\n    this.onSameLocationRun = this.onSameLocationRun.bind(this);\n    this.die = this.die.bind(this);\n    this.eatItself = this.eatItself.bind(this);\n    this.dropFood = this.dropFood.bind(this);\n    this.getNewLocation = this.getNewLocation.bind(this);\n  }\n\n  componentDidMount() {\n    this.mover = setInterval(() => {\n      this.moveSnake(this.props.direction)\n    }, 100);\n  }\n\n  getNewLocation() {\n\n    let randX = parseInt(Math.random() * 100, 10);\n    randX -= randX % this.snakeBlockSize;\n    let randY = parseInt(Math.random() * 100, 10);\n    randY -= randY % this.snakeBlockSize;\n\n    for (let index = 0; index < this.state.snakeBody.length; index += 1) {\n      const bodyBlock = this.state.snakeBody[index];\n\n      if (bodyBlock.x === randX && bodyBlock.y === randY) {\n        randX = parseInt(Math.random() * 100, 10);\n        randX -= randX % this.snakeBlockSize;\n        randY = parseInt(Math.random() * 100, 10);\n        randY -= randY % this.snakeBlockSize;\n        index = 0;\n        console.log(\"food overlap detected!\");\n\n      }\n    }\n\n    let foodLocation = {\n      x: randX,\n      y: randY\n    }\n    // console.log(randX, randY);\n\n    return foodLocation;\n  }\n\n  moveSnakeForward(isFoodEaten, newDir) {\n\n    this.setState(state => {\n\n      let oppDirGiven = (currentDir, newDir) => {\n        const oppDir = {\n          'ArrowRight': 'ArrowLeft',\n          'ArrowLeft': 'ArrowRight',\n          'ArrowUp': 'ArrowDown',\n          'ArrowDown': 'ArrowUp'\n        }\n        return currentDir === oppDir[newDir]\n      }\n\n\n      let getNewHeadFromDir = () => {\n        let newHead = {\n          x: state.snakeBody[0].x,\n          y: state.snakeBody[0].y\n        };\n\n        newDir = oppDirGiven(state.currentDir, newDir) ? state.currentDir : newDir;\n\n        if (newDir === 'ArrowRight')\n          newHead.x += this.snakeBlockSize;\n        else if (newDir === 'ArrowLeft')\n          newHead.x -= this.snakeBlockSize;\n        else if (newDir === 'ArrowUp')\n          newHead.y -= this.snakeBlockSize;\n        else if (newDir === 'ArrowDown')\n          newHead.y += this.snakeBlockSize;\n\n        return newHead;\n      }\n\n      let newHead = getNewHeadFromDir();\n\n      this.eatItself(newHead);\n\n      // dead from wall\n      if (newHead.x + this.snakeBlockSize > 100 ||\n        newHead.y + this.snakeBlockSize > 100 ||\n        newHead.x < 0 ||\n        newHead.y < 0) {\n        this.die();\n        return { gameOver: true }\n      }\n\n\n      let newState = {\n        snakeBody: [newHead, ...state.snakeBody],\n        currentDir: newDir,\n      };\n      if (!isFoodEaten) {\n        newState.snakeBody.pop();\n      }\n      return newState;\n    })\n  }\n\n  moveSnake(newDir) {\n    let isFoodEaten = this.checkFood();\n\n    this.moveSnakeForward(isFoodEaten, newDir);\n  }\n\n  checkFood() {\n    // increase the snake length\n    // console.log(\"Check Food!\");\n    const headLocation = {\n      x: this.state.snakeBody[0].x,\n      y: this.state.snakeBody[0].y\n    };\n\n    return this.onSameLocationRun(headLocation, this.state.foodLocation, this.dropFood)\n  }\n\n  onSameLocationRun(obj1, obj2, fn) {\n    let { x: x1, y: y1 } = obj1;\n    let { x: x2, y: y2 } = obj2;\n\n    if (x1 === x2 && y1 === y2) {\n      // console.log(\"Lets eat!\");\n      fn();\n      return true;\n    }\n    return false;\n  }\n\n  die() {\n    console.log('Imma ded!');\n    clearInterval(this.mover);\n    console.trace()\n  }\n\n  eatItself(newHead) {\n\n    // !oppDir[newDir] === this.state.currentDir\n    for (let bodyState of this.state.snakeBody) {\n      this.onSameLocationRun(newHead, bodyState, this.die);\n    }\n\n  }\n\n  dropFood() {\n    // console.log(\"Drop new Food\");\n    let foodLocation = this.getNewLocation();\n    this.setState({\n      foodLocation: foodLocation\n    });\n  }\n\n  render() {\n    let body = [];\n    for (let index = 0; index < this.state.snakeBody.length; index++) {\n      body.push(<SnakeBodyBlock\n        size={this.snakeBlockSize}\n        key={index}\n        head={index === 0}\n        location={this.state.snakeBody[index]}\n      />)\n    }\n\n    return (\n      <div>\n        <div>\n          {body}\n        </div>\n        < Food size={this.snakeBlockSize} foodLocation={this.state.foodLocation}\n        />\n        <CurrentScore gameOver={this.state.gameOver} snakeLength={this.state.snakeBody.length} initSnakeLength={this.initSnakeLength} />\n      </div>\n    )\n  }\n\n}\n\nexport default SnakeBody","import React from 'react';\n// import SnakeHead from './SnakeHead';\nimport SnakeBody from './SnakeBody';\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.sizes = {\n      platform: this.computePlayingField(window.innerHeight, window.innerWidth),\n      snake: 2\n    };\n    // initial state\n    this.state = {\n      direction: 'ArrowRight',\n    }\n    this.computePlayingField = this.computePlayingField.bind(this);\n  }\n\n  computePlayingField(screenHeight, screenWidth) {\n    let padding = 0.2;\n    let width;\n    let height;\n    let fieldLeftEdge;\n    let fieldTopEdge;\n\n    let shorter = Math.min(screenHeight, screenWidth);\n    let longer = Math.max(screenHeight, screenWidth);\n\n    let longerWidth = shorter === screenHeight;\n\n    // leave 20% on each side of the shorter dimension\n    // for longer width screens\n    if (longerWidth) {\n      width = shorter * (1 - 2 * padding);\n      height = width;\n      fieldLeftEdge = longer / 2 - width / 2;\n      fieldTopEdge = shorter / 2 - height / 2;\n    } else {\n      height = shorter * (1 - 2 * padding);\n      width = height;\n      fieldLeftEdge = shorter / 2 - width / 2;\n      fieldTopEdge = longer / 2 - height / 2;\n    }\n\n\n    return {\n      top: fieldTopEdge,\n      left: fieldLeftEdge,\n      width: width,\n      height: height\n    }\n\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', event => {\n      this.setState(state => {\n        return {\n          direction: event.key,\n        };\n      })\n    })\n  }\n\n\n  render() {\n    return (\n      <div tabIndex=\"1\" style={this.sizes.platform} className='Platform'>\n        <SnakeBody size={this.sizes.snake} direction={this.state.direction} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport Game from './components/Game'\n\nReactDOM.render(<Game />, document.getElementById('root') );\n"],"sourceRoot":""}